# Droplet provisioning will work a little differently because they don't create
# a default user and pass, only roots
- hosts: "droplet"
  gather_facts: no
  become: yes
  tasks:
  - name: Attempt SSH with provision_user
    become: no
    command: "ssh -o User={{ provision_user }} -i {{ provision_private_key | realpath }} -o ConnectTimeout=5 -o PreferredAuthentications=publickey -o PubkeyAuthentication=yes {{ ansible_host }}"
    connection: local
    ignore_errors: yes
    register: ssh_result
    changed_when: False

  - name: Setup ansible_user as Provision User if it is set up
    become: no
    connection: local
    set_fact:
      ansible_user: "{{ provision_user }}"
      ansible_ssh_private_key_file: "{{ provision_private_key | realpath }}"
    when: ssh_result is succeeded

  - name: "Log Default User"
    debug:
      msg: "Using default user '{{ default_user }}' for boostrapping."
    when: ssh_result is failed

  - name: Log Provision User"
    debug:
      msg: "Using provision user '{{ provision_user }}' because host is bootstrapped."
    when: ssh_result is succeeded

  - name: Bootstrap Provisioning User
    include_role:
      name: bootstrap_user
    vars:
      provision_public_key_path: "{{ provision_public_key | realpath }}"
    when: ssh_result is failed
  vars:
    ansible_user: "{{ default_user }}"

- hosts: "droplet"
  gather_facts: no
  become: yes
  tasks:
  - name: Update and Upgrade
    include_role:
      name: update_upgrade
  - name: Enable UFW and Default rules
    include_role:
      name: ufw_default
