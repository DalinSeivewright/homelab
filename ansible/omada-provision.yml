- hosts: "application_omada"
  gather_facts: no
  become: yes
  tasks:
  - name: Check Docker
    become: yes
    command: "docker --version"
    ignore_errors: yes
    register: docker_result
    changed_when: False

  - name: Ensure docker host group and docker installed
    fail:
      msg: "{{ inventory_hostname }} must be part of the docker_host group and docker-provision.yml must have been run!"
    when: "'docker_host' not in group_names or docker_result is failed"

  - name: Grab Docker User Subuid Start Range
    command: "grep -Po 'docker-manager:\\K[0-9]+' /etc/subuid"
    register: docker_subuid_start

  - name: Clone Omada Project
    connection: local
    become: no
    git:
      repo : "{{ omada_repo }}"
      dest : /tmp/application_omada
      key_file: "{{ansible_ssh_private_key_file}}"

  - name: Create omada docker volume folder
    file:
      path: "{{ docker_volume_path }}"
      state: directory
    notify: omada-controller | restart

  - name: Create omada docker volume data folder
    file:
      path: "{{ [docker_volume_path, 'docker_data'] | path_join }}"
      state: directory
    notify: omada-controller | restart

  - name: Create Config
    template:
      src: /tmp/application_omada/docker/omada-compose.yml.j2
      dest: "{{ [docker_volume_path, 'omada-compose.yml'] | path_join }}"
      mode: u+r
    notify:
      - omada-controller | restart

  - name: Change ownerships to docker container user (whoever decided not to accept UID and GID with file needs to be reprimanded)
    command: "chown -R {{ (docker_subuid_start.stdout | int) + docker_container_user_uid }}:{{ (docker_subuid_start.stdout | int) + docker_container_user_uid }} {{ [docker_volume_path, 'docker_data'] | path_join | quote }}"
    notify:
      - omada-controller | restart

   # Reverse proxy config
   # TODO upstream ssl needs a cert regardless of verify and omada does not have a cert I can export by default
   # For now I'll just use the default omada and set the DNS entry
  # - name: Reverse Proxy ensure site folder creation
  #   file:
  #     path: "{{ docker_reverse_proxy_site_path}}"
  #     state: directory
  #   delegate_to: "{{ omada_reverse_proxy_host }}"
  #   notify:
  #     - nginx reverse proxy | restart
  #     - omada-controller | restart
  #
  # - name: Reverse Proxy ensure certs folder creation
  #   file:
  #     path: "{{ docker_reverse_proxy_cert_path }}"
  #     state: directory
  #   delegate_to: "{{ omada_reverse_proxy_host }}"
  #   notify:
  #     - nginx reverse proxy | restart
  #     - omada-controller | restart
  #
  # - name: Reverse Proxy Create Site Config
  #   template:
  #     src: /tmp/application_omada/reverse_proxy/omada.conf.j2
  #     dest: "{{ [docker_reverse_proxy_site_path, 'omada.conf'] | path_join }}"
  #     mode: u+r
  #   vars:
  #     proxy_target: "{{omada_container_proxy_host if omada_container_macvlan_network else 'omada-controller' if inventory_hostname == omada_reverse_proxy_host else omada_container_proxy_host}}"
  #     omada_private_key_path: "{{ssl_key_path_in_container}}" # Will not be setup to support certbot atm
  #     omada_public_cert_path: "{{ssl_crt_path_in_container}}"
  #   delegate_to: "{{ omada_reverse_proxy_host }}"
  #   notify:
  #     - nginx reverse proxy | restart
  #     - omada-controller | restart
  #
  # - name: Generate Self Signed Cert
  #   include_role:
  #     name: self_signed_ssl_cert
  #   vars:
  #     self_signed_ssl_cert_key_path: "{{ssl_key_path}}"
  #     self_signed_ssl_cert_csr_path: "{{ssl_csr_path}}"
  #     self_signed_ssl_cert_crt_path: "{{ssl_crt_path}}"
  #     self_signed_ssl_cert_expire_date: "{{ ssl_cert_expire_date }}"
  #     self_signed_ssl_cert_common_name: "{{ omada_reverse_proxy_server_name }}"
  #     self_signed_ssl_cert_notifies:
  #       - nginx reverse proxy | restart
  #       - omada-controller | restart
  #     self_signed_ssl_cert_delegate_to: "{{ omada_reverse_proxy_host }}"
  #   when: omada_self_signed_certs
  #
  # - name: Reverse Proxy Chown proxy files
  #   command: "chown -R {{ (docker_subuid_start.stdout | int) + docker_container_user_uid }}:{{ (docker_subuid_start.stdout | int) + docker_container_user_uid }} {{ docker_reverse_proxy_volume_path | quote }}"
  #   delegate_to: "{{ omada_reverse_proxy_host }}"

  handlers:
    - name: nginx reverse proxy | restart
      command: "docker-compose -f {{[docker_volume_root, reverse_proxy_docker_folder, 'nginx-compose.yml'] | path_join | quote}} up -d --force-recreate"
      delegate_to: "{{ omada_reverse_proxy_host }}"
    - name: omada-controller | restart
      command: "docker-compose -f {{[docker_volume_path, 'omada-compose.yml'] | path_join | quote}} up -d --force-recreate"
  vars:
    docker_volume_path: "{{ [docker_volume_root, omada_docker_folder] | path_join }}"

    docker_reverse_proxy_volume_path: "{{ [docker_volume_root, reverse_proxy_docker_folder, 'data'] | path_join }}"
    docker_reverse_proxy_site_path: "{{[docker_reverse_proxy_volume_path, 'sites', omada_reverse_proxy_site_name] | path_join}}"
    docker_reverse_proxy_cert_path: "{{[docker_reverse_proxy_site_path, 'certs'] | path_join}}"
    # For Config file inside container
    omada_container_site_path: "{{['/data/config/sites', omada_reverse_proxy_site_name] | path_join}}"
    omada_container_site_cert_path: "{{['/data/config/sites', omada_reverse_proxy_site_name, 'certs'] | path_join}}"
    ssl_key_path_in_container: "{{[omada_container_site_cert_path, omada_reverse_proxy_site_name + '-selfsigned.key'] | path_join}}"
    ssl_crt_path_in_container: "{{[omada_container_site_cert_path, omada_reverse_proxy_site_name + '-selfsigned.crt'] | path_join}}"
    ssl_key_path: "{{[docker_reverse_proxy_cert_path, omada_reverse_proxy_site_name + '-selfsigned.key'] | path_join}}"
    ssl_csr_path: "{{[docker_reverse_proxy_cert_path, omada_reverse_proxy_site_name + '-selfsigned.csr'] | path_join}}"
    ssl_crt_path: "{{[docker_reverse_proxy_cert_path, omada_reverse_proxy_site_name + '-selfsigned.crt'] | path_join}}"

    ansible_user: "{{ provision_user }}"
    ansible_ssh_private_key_file: "{{ provision_private_key | realpath }}"
