import board
import neopixel
import os
import time
import json
hosts = [
{% for host in healthchecker_hosts %}
  '{{host}}',
{% endfor %}
]

BRIGHTNESS = 4
PIXEL_COUNT = 16

def load():
  try:
    with open("/tmp/neopixel-healthchecker.json") as status_file:
      return json.load(status_file)
  except IOError:
      return {}

def ping(status_data):
  for i in range(len(hosts)):
    time.sleep(0.5)
    r = os.system("ping -c 1 -w 1 " + hosts[i] + " > /dev/null")
    status_data[hosts[i]] = r
  return status_data


def update_leds(pixels, status_data, update_delay):
  print("UPDATE LEDS")
  for i in range(PIXEL_COUNT):
    print(i)
    if i >= len(hosts):
      return
    if hosts[i] not in status_data:
      print("HOST " + hosts[i] + " NOT KNOWN, MOVING ON")
      pixels[i] = (0, 0, BRIGHTNESS)
      continue
    print("waiting " + str(update_delay))
    time.sleep(update_delay)
    if status_data[hosts[i]] == 0:
      pixels[i] = (BRIGHTNESS, BRIGHTNESS, BRIGHTNESS)
    else:
      pixels[i] = (BRIGHTNESS, 0, 0)


def save(status_data):
  with open("/tmp/neopixel-healthchecker.json", "w") as status_file:
    json.dump(status_data, status_file)

def main():
  print("loading")
  status_data = load()
  print("init neo pixel")
  pixels = neopixel.NeoPixel(board.D18, PIXEL_COUNT)
  print("update from cache")
  update_leds(pixels, status_data, 0)
  print("ping")
  test = time.time()
  updated_status_data = ping(status_data)
  print(time.time() - test)
  print("save")
  save(updated_status_data)
  print("update with new")
  update_leds(pixels, updated_status_data, 0.5)
  print("DONE")
if __name__ == "__main__":
    main()

