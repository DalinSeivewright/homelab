import board
import neopixel
import os
import time
import json
from concurrent import futures
hosts = [
{% for host in healthchecker_hosts %}
  '{{host}}',
{% endfor %}
]

BRIGHTNESS = 4
PIXEL_COUNT = 16

def load():
  try:
    with open("/tmp/neopixel-healthchecker.json") as status_file:
      return json.load(status_file)
  except IOError:
    return {}

def update_leds(pixels, status_data, updating_animation, update_delay):
  for i in range(PIXEL_COUNT):
    if i >= len(hosts):
      return
    if hosts[i] not in status_data:
      pixels[i] = (0, 0, BRIGHTNESS)
      continue
    if updating_animation:
        pixels[i] = (0, 0, BRIGHTNESS)
        time.sleep(update_delay)
    if status_data[hosts[i]] == 0:
      pixels[i] = (BRIGHTNESS, BRIGHTNESS, BRIGHTNESS)
    else:
      pixels[i] = (BRIGHTNESS, 0, 0)


def save(status_data):
  with open("/tmp/neopixel-healthchecker.json", "w") as status_file:
    json.dump(status_data, status_file)


def ping(host):
    r = os.system("ping -c 1 -w 1 " + host + " > /dev/null")
    return [host, r]

def ping_hosts(status_data):
    updated_status_data = {}
    with futures.ProcessPoolExecutor(max_workers=8) as pool:
        ping_futures = []
        for i in range(len(hosts)):
            ping_futures.append(pool.submit(ping, hosts[i]))
        while ping_futures:
            done_pings, ping_futures = futures.wait(ping_futures, timeout = 0.5)
            for future in done_pings:
                data = future.result()
                updated_status_data[data[0]] = data[1]
    return updated_status_data

def main():
  status_data = load()
  pixels = neopixel.NeoPixel(board.D18, PIXEL_COUNT)
  update_leds(pixels, status_data, False, 0)
  updated_status_data = ping_hosts(status_data)
  save(updated_status_data)
  update_leds(pixels, updated_status_data, True, 0.5)

if __name__ == "__main__":
    main()



